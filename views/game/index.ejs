<html>
<head>
	<title>jabys - big2 on roids</title>
	
	<link rel='stylesheet' id="game-iphone-css" media="screen and (min-width: 481px)" href='../stylesheets/game.css' />
	<link rel='stylesheet' href='../stylesheets/tipsy.css' />
			
	<link rel="stylesheet" id="game-iphone-css" media="screen and (min-width: 321px) and (max-width: 480px)" href="../stylesheets/game_iphone_480.css" />
	
	<link rel="stylesheet" id="game-iphone-css" media="screen and (min-width: 320px) and (max-width: 320px)" href="../stylesheets/game_iphone_320.css" />
	
	
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
	
	<script src="/javascripts/jquery-ui-1.8.16.custom.min.js"></script>
    
	<script src="/javascripts/jquery.tipsy.js"></script>
 
	<script type="text/javascript">	// juicy stuff
		var players = [];
		var gameId = 0;
		var currentCombosPlayed = 0;
		var current_cardback_file_name = "bicycle_blue.png";
		var chatFlashInterval, chatFlashTimeout;
		var windowFocused = false;
		var windowTitleInterval;
		var keyMapping = {
			49: 1, 50: 2, 51: 3, 52: 4, 53: 5, 
			113: 6, 119: 7, 101: 8, 114: 9, 116: 10, 
			97: 11, 115: 12, 100: 13, 102: 14, 103: 15, 
			122: 16, 120: 17, 99: 18, 118: 19, 98: 20};
		var cardValueMapping = {"A": 14, "2": 15, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "10": 10, "J": 11, "Q": 12, "K": 13};
		function urlify(text) {
		    var urlRegex = /(https?:\/\/[^\s]+)/g;
		    return text.replace(urlRegex, function(url) {
		        return '<a href="' + url + '" target="_blank">' + url + '</a>';
		    });
		}


		Object.size = function(obj) {
		    var size = 0, key;
		    for (key in obj) {
		        if (obj.hasOwnProperty(key)) size++;
		    }
		    return size;
		};

		function ping(){
			document.getElementById('ping').play();
		}

		function encodeHTML(s) {
		    return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
		}

		// card helper functions
		function getCardHtml(card, shown){
			if (card.length == 3) {
				var val = '10';
				var suit = card[2];
			}
			else {
				var val = card[0];
				var suit = card[1];
			}
	
			var htmlString = "";
			if (shown){
			switch (suit){
				case "C":
					switch (val){
						case 'A':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>A<br />&clubs;</div><div class='ace'>&clubs;</div></div></div>";
							break;
						case '2':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>2<br />&clubs;</div><div class='spotB1'>&clubs;</div><div class='spotB5'>&clubs;</div></div></div>";
							break;
						case '3':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>3<br />&clubs;</div><div class='spotB1'>&clubs;</div><div class='spotB3'>&clubs;</div><div class='spotB5'>&clubs;</div></div></div>";
							break;
						case '4':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>4<br />&clubs;</div><div class='spotA1'>&clubs;</div><div class='spotA5'>&clubs;</div><div class='spotC1'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;
						case '5':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>5<br />&clubs;</div><div class='spotA1'>&clubs;</div><div class='spotA5'>&clubs;</div><div class='spotB3'>&clubs;</div><div class='spotC1'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;
						case '6':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>6<br />&clubs;</div><div class='spotA1'>&clubs;</div><div class='spotA3'>&clubs;</div><div class='spotA5'>&clubs;</div><div class='spotC1'>&clubs;</div><div class='spotC3'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;
						case '7':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>7<br />&clubs;</div><div class='spotA1'>&clubs;</div><div class='spotA3'>&clubs;</div><div class='spotA5'>&clubs;</div><div class='spotB2'>&clubs;</div><div class='spotC1'>&clubs;</div><div class='spotC3'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;
						case '8':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>8<br />&clubs;</div><div class='spotA1'>&clubs;</div><div class='spotA3'>&clubs;</div><div class='spotA5'>&clubs;</div><div class='spotB2'>&clubs;</div><div class='spotB4'>&clubs;</div><div class='spotC1'>&clubs;</div><div class='spotC3'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;					
						case '9':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>9<br />&clubs;</div><div class='spotA1'>&clubs;</div><div class='spotA2'>&clubs;</div><div class='spotA4'>&clubs;</div><div class='spotA5'>&clubs;</div><div class='spotB3'>&clubs;</div><div class='spotC1'>&clubs;</div><div class='spotC2'>&clubs;</div><div class='spotC4'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;
						case '10':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>10<br />&clubs;</div><div class='spotA1'>&clubs;</div><div class='spotA2'>&clubs;</div><div class='spotA4'>&clubs;</div><div class='spotA5'>&clubs;</div><div class='spotB2'>&clubs;</div><div class='spotB4'>&clubs;</div><div class='spotC1'>&clubs;</div><div class='spotC2'>&clubs;</div><div class='spotC4'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;
						case 'J':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>J<br />&clubs;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/jack.gif' alt='' /><div class='spotA1'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;
						case 'Q':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>Q<br />&clubs;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/queen.gif' alt='' /><div class='spotA1'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;
						case 'K':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='c'>K<br />&clubs;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/king.gif' alt='' /><div class='spotA1'>&clubs;</div><div class='spotC5'>&clubs;</div></div></div>";
							break;
					}
					break;
				case "D":
					switch (val){
						case 'A':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>A<br />&diams;</div><div class='ace'>&diams;</div></div></div>";
							break;
						case '2':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>2<br />&diams;</div><div class='spotB1'>&diams;</div><div class='spotB5'>&diams;</div></div></div>";
							break;
						case '3':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>3<br />&diams;</div><div class='spotB1'>&diams;</div><div class='spotB3'>&diams;</div><div class='spotB5'>&diams;</div></div></div>";
							break;
						case '4':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>4<br />&diams;</div><div class='spotA1'>&diams;</div><div class='spotA5'>&diams;</div><div class='spotC1'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;
						case '5':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>5<br />&diams;</div><div class='spotA1'>&diams;</div><div class='spotA5'>&diams;</div><div class='spotB3'>&diams;</div><div class='spotC1'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;
						case '6':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>6<br />&diams;</div><div class='spotA1'>&diams;</div><div class='spotA3'>&diams;</div><div class='spotA5'>&diams;</div><div class='spotC1'>&diams;</div><div class='spotC3'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;
						case '7':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>7<br />&diams;</div><div class='spotA1'>&diams;</div><div class='spotA3'>&diams;</div><div class='spotA5'>&diams;</div><div class='spotB2'>&diams;</div><div class='spotC1'>&diams;</div><div class='spotC3'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;
						case '8':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>8<br />&diams;</div><div class='spotA1'>&diams;</div><div class='spotA3'>&diams;</div><div class='spotA5'>&diams;</div><div class='spotB2'>&diams;</div><div class='spotB4'>&diams;</div><div class='spotC1'>&diams;</div><div class='spotC3'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;					
						case '9':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>9<br />&diams;</div><div class='spotA1'>&diams;</div><div class='spotA2'>&diams;</div><div class='spotA4'>&diams;</div><div class='spotA5'>&diams;</div><div class='spotB3'>&diams;</div><div class='spotC1'>&diams;</div><div class='spotC2'>&diams;</div><div class='spotC4'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;
						case '10':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>10<br />&diams;</div><div class='spotA1'>&diams;</div><div class='spotA2'>&diams;</div><div class='spotA4'>&diams;</div><div class='spotA5'>&diams;</div><div class='spotB2'>&diams;</div><div class='spotB4'>&diams;</div><div class='spotC1'>&diams;</div><div class='spotC2'>&diams;</div><div class='spotC4'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;
						case 'J':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>J<br />&diams;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/jack.gif' alt='' /><div class='spotA1'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;
						case 'Q':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>Q<br />&diams;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/queen.gif' alt='' /><div class='spotA1'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;
						case 'K':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='d'>K<br />&diams;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/king.gif' alt='' /><div class='spotA1'>&diams;</div><div class='spotC5'>&diams;</div></div></div>";
							break;
					}
					break;
				case "H":
					switch (val){
						case 'A':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>A<br />&hearts;</div><div class='ace'>&hearts;</div></div></div>";
							break;
						case '2':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>2<br />&hearts;</div><div class='spotB1'>&hearts;</div><div class='spotB5'>&hearts;</div></div></div>";
							break;
						case '3':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>3<br />&hearts;</div><div class='spotB1'>&hearts;</div><div class='spotB3'>&hearts;</div><div class='spotB5'>&hearts;</div></div></div>";
							break;
						case '4':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>4<br />&hearts;</div><div class='spotA1'>&hearts;</div><div class='spotA5'>&hearts;</div><div class='spotC1'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;
						case '5':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>5<br />&hearts;</div><div class='spotA1'>&hearts;</div><div class='spotA5'>&hearts;</div><div class='spotB3'>&hearts;</div><div class='spotC1'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;
						case '6':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>6<br />&hearts;</div><div class='spotA1'>&hearts;</div><div class='spotA3'>&hearts;</div><div class='spotA5'>&hearts;</div><div class='spotC1'>&hearts;</div><div class='spotC3'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;
						case '7':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>7<br />&hearts;</div><div class='spotA1'>&hearts;</div><div class='spotA3'>&hearts;</div><div class='spotA5'>&hearts;</div><div class='spotB2'>&hearts;</div><div class='spotC1'>&hearts;</div><div class='spotC3'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;
						case '8':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>8<br />&hearts;</div><div class='spotA1'>&hearts;</div><div class='spotA3'>&hearts;</div><div class='spotA5'>&hearts;</div><div class='spotB2'>&hearts;</div><div class='spotB4'>&hearts;</div><div class='spotC1'>&hearts;</div><div class='spotC3'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;					
						case '9':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>9<br />&hearts;</div><div class='spotA1'>&hearts;</div><div class='spotA2'>&hearts;</div><div class='spotA4'>&hearts;</div><div class='spotA5'>&hearts;</div><div class='spotB3'>&hearts;</div><div class='spotC1'>&hearts;</div><div class='spotC2'>&hearts;</div><div class='spotC4'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;
						case '10':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>10<br />&hearts;</div><div class='spotA1'>&hearts;</div><div class='spotA2'>&hearts;</div><div class='spotA4'>&hearts;</div><div class='spotA5'>&hearts;</div><div class='spotB2'>&hearts;</div><div class='spotB4'>&hearts;</div><div class='spotC1'>&hearts;</div><div class='spotC2'>&hearts;</div><div class='spotC4'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;
						case 'J':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>J<br />&hearts;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/jack.gif' alt='' /><div class='spotA1'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;
						case 'Q':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>Q<br />&hearts;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/queen.gif' alt='' /><div class='spotA1'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;
						case 'K':
							htmlString += "<div class='card'><div class='front red'><div class='index' data-suit='h'>K<br />&hearts;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/king.gif' alt='' /><div class='spotA1'>&hearts;</div><div class='spotC5'>&hearts;</div></div></div>";
							break;
					}
					break;
				case "S":
					switch (val){
						case 'A':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>A<br />&spades;</div><div class='ace'>&spades;</div></div></div>";
							break;
						case '2':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>2<br />&spades;</div><div class='spotB1'>&spades;</div><div class='spotB5'>&spades;</div></div></div>";
							break;
						case '3':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>3<br />&spades;</div><div class='spotB1'>&spades;</div><div class='spotB3'>&spades;</div><div class='spotB5'>&spades;</div></div></div>";
							break;
						case '4':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>4<br />&spades;</div><div class='spotA1'>&spades;</div><div class='spotA5'>&spades;</div><div class='spotC1'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;
						case '5':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>5<br />&spades;</div><div class='spotA1'>&spades;</div><div class='spotA5'>&spades;</div><div class='spotB3'>&spades;</div><div class='spotC1'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;
						case '6':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>6<br />&spades;</div><div class='spotA1'>&spades;</div><div class='spotA3'>&spades;</div><div class='spotA5'>&spades;</div><div class='spotC1'>&spades;</div><div class='spotC3'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;
						case '7':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>7<br />&spades;</div><div class='spotA1'>&spades;</div><div class='spotA3'>&spades;</div><div class='spotA5'>&spades;</div><div class='spotB2'>&spades;</div><div class='spotC1'>&spades;</div><div class='spotC3'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;
						case '8':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>8<br />&spades;</div><div class='spotA1'>&spades;</div><div class='spotA3'>&spades;</div><div class='spotA5'>&spades;</div><div class='spotB2'>&spades;</div><div class='spotB4'>&spades;</div><div class='spotC1'>&spades;</div><div class='spotC3'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;					
						case '9':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>9<br />&spades;</div><div class='spotA1'>&spades;</div><div class='spotA2'>&spades;</div><div class='spotA4'>&spades;</div><div class='spotA5'>&spades;</div><div class='spotB3'>&spades;</div><div class='spotC1'>&spades;</div><div class='spotC2'>&spades;</div><div class='spotC4'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;
						case '10':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>10<br />&spades;</div><div class='spotA1'>&spades;</div><div class='spotA2'>&spades;</div><div class='spotA4'>&spades;</div><div class='spotA5'>&spades;</div><div class='spotB2'>&spades;</div><div class='spotB4'>&spades;</div><div class='spotC1'>&spades;</div><div class='spotC2'>&spades;</div><div class='spotC4'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;
						case 'J':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>J<br />&spades;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/jack.gif' alt='' /><div class='spotA1'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;
						case 'Q':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>Q<br />&spades;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/queen.gif' alt='' /><div class='spotA1'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;
						case 'K':
							htmlString += "<div class='card'><div class='front black'><div class='index' data-suit='s'>K<br />&spades;</div><img class='face' src='http://www.brainjar.com/css/cards/graphics/king.gif' alt='' /><div class='spotA1'>&spades;</div><div class='spotC5'>&spades;</div></div></div>";
							break;
					}
					break;
				}
			}
			else{
				htmlString += "<div class='card'></div>";	
			}
			return htmlString;
		}
		
		function readjustDivs(div, margin){
			var numCards = $(div).children().length;
			var slotWidth = parseInt($(div).width());
			var cardWidth = parseInt($('.card').width());
			var maxWidth = slotWidth - cardWidth;
			
			var increment = maxWidth/(numCards - 1);
	
			if (increment <= 50){
				var leftMargin = 0;
			}
			else{
				increment = 50;
				var leftMargin = (maxWidth - (numCards-1)*increment)/2;	
			}
			$(div).children().each(function(index, cardDiv){
				if (margin){
					if (numCards == 1){
						var leftOffset = leftMargin+index*increment+100/2-2;
					}
					else{
						var leftOffset = leftMargin+index*increment+increment/2-2;	
					}
				}
				else{
					var leftOffset = leftMargin+index*increment;
				}
				$(this).css("left", leftOffset).css("background-image", "url(/images/cardback/"+current_cardback_file_name+")");
			});
	
		}

		$(window).bind('orientationchange', updateOrientation);
		
		function updateOrientation() {
			// 		    var width;
			// 		    switch(window.orientation) {
			// 		        case 0:
			// width = "360";
			// break;
			// 
			// case -90:
			// width = "480";
			// break;
			// 
			// case 90:
			// width = "480";
			// break;
			// 
			// case 180:
			// width = "360";
			// break;
			// 		    }
			// $('#game-iphone-css').attr('href', '../stylesheets/game_iphone_'+width+'.css');
			readjustDivs('#slot-bot', false);
			readjustDivs('#slot-top', false);
			readjustDivs('#slot-left', false);
			readjustDivs('#slot-right', false);
		}
			
		$(document).ready(function() {
			var top = 30;
			var left = 0;
	
			now.showCurrentPlayer = function(userObj){
				var clientId = userObj['id'],
					color = userObj['color'];
					
				$('.player-name').each(function() {
					if ($(this).attr("data-id") == clientId){
						$(this).css("color", color).css("font-weight", "bold");
					}
					else{
						$(this).css("color", color).css("font-weight", "normal");
					}
				});
			}
	
			now.removeUser = function(clientId){
				$('#user-'+clientId).remove();
			}
	
			// client button updates
			now.removeStartButton = function(){
				$('#start-btn').remove();
			}
	
			now.removeGameOverButton = function(){
				$('#game-over-btn').remove();
			}
	
			now.removeWaitForGame = function(){
				$('#wait-for-game').remove();
			}
	
			now.showStartButton = function(){
				if ($('#start-btn').length == 0){
					$('#game-controls').prepend('<a href="#" data-role="button" id="start-btn" class="btn">Start</a>');
				}
			}
	
			now.showMakeMoveButton = function(){
				if ($('#make-move-btn').length == 0){
					$('#game-controls').append('<a href="#" data-role="button" id="make-move-btn" class="btn">Make move</a>');
				}
			}
	
			now.showMakePassMoveButton = function(){
				if ($('#make-pass-move-btn').length == 0){
					$('#game-controls').append('<a href="#" data-role="button" id="make-pass-move-btn" class="btn">Pass</a>');
				}
			}
	
			now.showWaitForGame = function(){
				if ($('#wait-for-game').length == 0){
					$('#game-controls').append('<span id="wait-for-game">Waiting for more players...</span>');
				}
			}
	
			now.showJackMessage = function(){
				$('#game-jack-message').show();
			}
	
			now.showAutoPass = function(){
				// auto passing
				if ($('#auto-pass').length == 0){
					$('#game-controls').append('<span id="auto-pass">Passing...</span>');
				}
			}
	
			now.removeAutoPass = function(){
				$('#auto-pass').remove();
			}
	
			now.handleGameOver = function(){
				// remove action buttons
				$('#make-move-btn').remove();
				$('#make-pass-move-btn').remove();
				// hide user friendly messages
				$('#game-seven-message').hide();
				$('#game-ten-message').hide();
				$('#game-jack-message').hide();
				$('#game-error-message').hide();
				// show game over
				$('#game-controls').append('<a href="#" data-role="button" id="game-over-btn" class="btn">Game Over (Play Again)</a>');
			}
	
			// client button actions
			$('#start-btn').live("click", function(e){
				now.initGame();
				$(this).remove();
				e.preventDefault();
			});
	
			$('#make-move-btn').live("click", function(e){
				var selectedCards = $('.selected');
				var hand = [];
				var value;
				var text;
				selectedCards.each(function(){
					text = $(this).find('.index').text();
					text = text.substring(0, text.length-1);
					var suit = $(this).find('.index').attr('data-suit');
					if (suit == 'c' || suit == 'd' || suit == 'h' || suit == 's'){
						text += suit.toUpperCase();
					}
					hand.push(text);
				});
				$(this).remove();
				$('#make-pass-move-btn').remove();
				$('#game-jack-message').hide();
				$('#game-seven-message').hide();
				$('#game-ten-message').hide();
				now.sendMove(hand);
				e.preventDefault();
			});
	
			$('#make-pass-move-btn').live("mousedown", function(e){
				$('#make-move-btn').remove();
				$('#game-jack-message').hide();
		
				$(this).remove();
				now.sendPassMove();
				
				e.preventDefault();
			});
	
			$('#game-over-btn').live("click", function(e){
				$(this).remove();
				now.waitForGame();
				e.preventDefault();
			});
	
			// client dealing	
			now.dealPersonalHand = function(hand){
				var slotWidth 	= 	parseInt($('#slot-bot').width()),
					cardWidth 	= 	parseInt($('#sample-card').first().width()),
					maxWidth	=	slotWidth - cardWidth;
				console.log(cardWidth);
				$('#slot-bot').empty();
				hand.forEach(function(card, index){
					var leftOffset = index*maxWidth/(hand.length-1);
					var cardHtml = getCardHtml(card, true);
					var cardDiv = $(''+cardHtml).css("left", leftOffset);
					$('#slot-bot').append(cardDiv);
				});
				showShortcuts();
			}
	
			function showShortcuts(){
				$('#slot-bot-sc').empty();
				var numCards = $('#slot-bot').children().length;
				$('#slot-bot').children().each(function(index, cardDiv){
					if (index < 5){
						var scDiv = $('<div>'+(index+1)+'</div>');
					}
					else if (index == 5){
						var scDiv = $('<div>q</div>');
					}
					else if (index == 6){
						var scDiv = $('<div>w</div>');
					}
					else if (index == 7){
						var scDiv = $('<div>e</div>');
					}
					else if (index == 8){
						var scDiv = $('<div>r</div>');
					}
					else if (index == 9){
						var scDiv = $('<div>t</div>');
					}
					else if (index == 10){
						var scDiv = $('<div>a</div>');
					}
					else if (index == 11){
						var scDiv = $('<div>s</div>');
					}
					else if (index == 12){
						var scDiv = $('<div>d</div>');
					}
					else if (index == 13){
						var scDiv = $('<div>f</div>');
					}
					else if (index == 14){
						var scDiv = $('<div>g</div>');
					}
					else if (index == 15){
						var scDiv = $('<div>z</div>');
					}
					else if (index == 16){
						var scDiv = $('<div>x</div>');
					}
					else if (index == 17){
						var scDiv = $('<div>c</div>');
					}
					else if (index == 18){
						var scDiv = $('<div>v</div>');
					}
					else if (index == 19){
						var scDiv = $('<div>b</div>');
					}
					scDiv.css("position", "absolute").css("left", $(cardDiv).position().left);
					$('#slot-bot-sc').append(scDiv);
				});
				// $('#slot-bot-sc').hide().fadeIn(1000);
				readjustDivs("#slot-bot-sc", true);
		
			}
	
			now.dealOtherHand = function(hand, playerIndex, numPlayers, show){
				if (numPlayers == 2){
					if (playerIndex == 0){
						var div = "#slot-top";
					}
					else{
						var div = "#slot-bot";
					}
				}
				else{
					if (playerIndex == 0){
						var div = "#slot-left";
					}
					else if (playerIndex == 1){
						var div = '#slot-top';
					}
					else if (playerIndex == 2){
						var div = '#slot-right';
					}
					else if (playerIndex == 3){
						var div = '#slot-bot';
					}
				}
				$(div).empty();
				
				var slotWidth 	= 	parseInt($(div).width()),
					cardWidth 	= 	parseInt($('#sample-card').width()),
					maxWidth 	= 	slotWidth - cardWidth;
				hand.forEach(function(card, index){
					var leftOffset = index*(maxWidth)/(hand.length-1);
					var cardHtml = getCardHtml("", false);
					var cardDiv = $(''+cardHtml).css("left", leftOffset);
					$(div).append(cardDiv);
				});
			}
	
			// show names of players on their cards
			now.showPlayerName = function(playerIndex, playerName, playerId, numPlayers){
				if (numPlayers == 2){
					if (playerIndex == 0){
						var div = "#slot-top-label";	
					}
					else{
						var div = "#slot-bot-label";
					}
				}
				else{
					if (playerIndex == 0){
						var div = '#slot-left-label';
					}
					else if (playerIndex == 1){
						var div = '#slot-top-label';
					}
					else if (playerIndex == 2){
						var div = '#slot-right-label';
					}
					else if (playerIndex == 3){
						var div = '#slot-bot-label';
					}
				}
				$(div).text(playerName).attr("data-id", playerId);
			}
	
			// add cards to slot middle
			now.addToCurrentPlay = function(hand) {
				var cardWidth = parseInt($('#sample-card').width()),
					cardHeight = parseInt($('#sample-card').height()),
					randomLeftOffset = cardWidth/2 + Math.floor(30*Math.random()),
					verticalOffset = cardHeight*23/130;
					
				hand.forEach(function(card, index){
					var cardHtml = getCardHtml(card, true);
					var leftOffset = index * (cardWidth*3/10) + randomLeftOffset;			
					var cardDiv = $(''+cardHtml).css("left", leftOffset).css("top", currentCombosPlayed%4*verticalOffset);
					$('#slot-middle').append(cardDiv);
				});
				currentCombosPlayed ++;
			}
	
			// removing card from my hand
			now.removeFromPersonalHand = function(hand){
				var text;
				$('#slot-bot').find('.card').each(function(){
					text = $(this).find('.index').text();
					text = text.substring(0, text.length-1);
					var suit = $(this).find('.index').attr('data-suit');
					if (suit == 'c' || suit == 'd' || suit == 'h' || suit == 's'){
						text += suit.toUpperCase();
					}
					if (hand.indexOf(text) > -1){
						$(this).remove();
					}
				});
		
				showShortcuts();
				// readjust spacing of hand
				readjustDivs('#slot-bot', false);
			}
	
			// adding cards to my hand 
			now.addToPersonalHand = function(cards){
				var cardsToAnimate = [];
				cards.forEach(function(card, index){
					if (card.length == 3){
						var cardToAddValue = 10;
					}
					else{
						var cardToAddValue = cardValueMapping[card[0]];
					}
					var cardsInHand = $('#slot-bot').children();
					if (cardsInHand.length == 0){
						var cardHtml = getCardHtml(card, true);
						var newCardDiv = $(cardHtml);
						newCardDiv.find('.front').css("background-color", "##ffedcc").delay(5000).animate({backgroundColor: '#ffffff'}, 3000);
						$('#slot-bot').append(newCardDiv);
					}
					else{
						for (var i = 0; i < cardsInHand.length; i++){
							var cardDiv = cardsInHand[i];
							var text = $(cardDiv).find('.index').text();
							text = text.substring(0, text.length - 1);
							var value = cardValueMapping[text];
							if (value > cardToAddValue){
								var cardHtml = getCardHtml(card, true);
								var newCardDiv = $(cardHtml);
								newCardDiv.find('.front').css("background-color", "##ffedcc").delay(5000).animate({backgroundColor: '#ffffff'}, 3000);
								newCardDiv.insertBefore(cardDiv);
								break;
							}
							if (i == cardsInHand.length - 1){
								var cardHtml = getCardHtml(card, true);
								var newCardDiv = $(cardHtml);
								newCardDiv.find('.front').css("background-color", "##ffedcc").delay(5000).animate({backgroundColor: '#ffffff'}, 3000);
								newCardDiv.insertAfter(cardDiv);
							}
						}
					}
				});
				readjustDivs("#slot-bot", false);
				showShortcuts();
			}
	
			now.removeFromOtherHand = function(numCardsToRemove, playerIndex, numPlayers){
				if (numPlayers == 2){
					if (playerIndex == 0){
						var div = "#slot-top";
					}
					else{
						var div = "#slot-bot";
					}
				}
				else{
					if (playerIndex == 0){
						var div = "#slot-left";
					}
					else if (playerIndex == 1){
						var div = '#slot-top';
					}
					else if (playerIndex == 2){
						var div = '#slot-right';
					}
					else if (playerIndex == 3){
						var div = '#slot-bot';
					}
				}
				for (var i = 0; i < numCardsToRemove; i++){
					$(div).find('.card:first-child').remove();	
				}
				// readjust spacing of hand
				readjustDivs(div, false);
			}
	
			now.addToOtherHand = function(numCardsToAdd, playerIndex, numPlayers){
				if (numPlayers == 2){
					if (playerIndex == 0){
						var div = "#slot-top";
					}
					else{
						var div = "#slot-bot";
					}
				}
				else{
					if (playerIndex == 0){
						var div = "#slot-left";
					}
					else if (playerIndex == 1){
						var div = '#slot-top';
					}
					else if (playerIndex == 2){
						var div = '#slot-right';
					}
					else if (playerIndex == 3){
						var div = '#slot-bot';
					}
				}
				for (var i = 0; i < numCardsToAdd; i++){
					var cardHtml = getCardHtml("", false);
					$(div).append($(cardHtml));
				}
				// readjust spacing of hand
				readjustDivs(div, false);
			}

	
			now.showErrorMessage = function(message){
				$('#game-error-message').text(message).show().delay(3000).fadeOut();
			}
	
			now.clearStage = function(){
				currentCombosPlayed = 0;
				$('#slot-middle :not(#slot-middle-label)').remove();
			}
	
			now.clearDiscardPile = function(){
				$('#slot-discard :not(#slot-discard-label)').remove();
			}
	
			now.clearSlots = function(){
				$('.slot').empty();
				$('.player-name').empty();
			}
	
			now.removePlayer = function(relativeIndex, numPlayers){
				if (numPlayers == 2){
					if (relativeIndex == 0){
						var div = "#slot-top";
					}
					else{
						var div = "#slot-bot";
					}
				}
				else{
					if (relativeIndex == 0){
						var div = "#slot-left";
					}
					else if (relativeIndex == 1){
						var div = '#slot-top';
					}
					else if (relativeIndex == 2){
						var div = '#slot-right';
					}
					else if (relativeIndex == 3){
						var div = '#slot-bot';
					}
				}
				$(div).empty();
			}
	
			now.addToDiscardPile = function(numCards){
				// $('#slot-discard :not(#slot-discard-label)').remove();
				for (var i = 0; i < numCards; i++){
					var cardHtml = getCardHtml("", false);
					var left = Math.random()/3*100;
					var top = Math.random()/3*100;
			
					var cardDiv = $(''+cardHtml).css("left", left+"%").css("top", top+"%").css("background-image", "url(/images/cardback/"+current_cardback_file_name+")");
			
					$('#slot-discard').append(cardDiv);
				};
			}
	
			now.removeFromDiscardPile = function(numCards){
				var numDiscarded = $('#slot-discard').children().length;
				for (var i = 0; i < numCards; i++){
					var randomChildIndex = Math.floor(Math.random()*numDiscarded) + 1;
					$('#slot-discard .card:nth-child('+randomChildIndex+')').remove();
				}
			}
	
			$('.card').live("click", function(e){
				var cardHeight = parseInt($(this).height()),
					cardOutjogHeight = cardHeight*40/130;
					
				if ($(this).find('.front').length > 0 && $(this).closest("#slot-middle").length == 0) {
					
					if ($(this).hasClass('selected')){
						$(this).animate({top: '+='+cardOutjogHeight+'px'}, 10, "linear");
					}
					else{
						$(this).animate({top: '-='+cardOutjogHeight+'px'}, 10, "linear");
					}
					$(this).toggleClass('selected');
				}
			});
	
			$('#chat-submit').live("keypress", function(e){		
				var message = $(this).val().trim();
				if (e.keyCode == 13 && message != ""){
					if (!$('#chat-messages').is(':visible')){
						$('.chat-bar-button').trigger('click');
					}
					now.submitChat(message);
					$(this).val("");
				}
			});
			
			$('#clients-search').live("keyup", function(e){
				var query = $(this).val().trim().toLowerCase();
				$('#clients-list').children().each(function(index, client){
					$(client).find('.client-name').css("background-color", "transparent");
				});
				
				$('#clients-list').children().each(function(index, client){
					var nameAtIndex = $(client).find('.client-name').text().toLowerCase();
					if (query == nameAtIndex){
						$(client).find('.client-name').css("background-color", "#63D1F4");
					}
				});
				
			});
	
			$('#nickname-submit').live("keypress focusout", function(e){
				if (e.keyCode == 13 || e.type == "focusout"){
					$('#chat-submit').focus();
					var name = $(this).val().trim();
					if (name != ""){
						now.submitNickname(name);	
					}
				}
			});
	
			now.updateChat = function(messageHash, color){
				var type = messageHash["type"];
				var text = messageHash["text"];
				var name = encodeHTML(messageHash["userInfo"]["name"]);
				var id = messageHash["userInfo"]["id"];
				if (type == "emote"){
					$('#chat-messages').append("<div class='chat-message passive'>"+name+" "+text+"</div>");
				}
				else if (type == "chat"){
					if (text == "/tableflip"){
						text = "(╯°□°)╯︵ ┻━┻";
					}
					else if (text == "/tablefix"){
						text = "┬─┬ノ( º _ ºノ)";
					}
					else if (text == "/whatever"){
						text = "¯\\_(ツ)_/¯"
					}
					$('#chat-messages').append("<div class='chat-message active'><span class='name' style='color: "+color+";'>"+name+":</span> "+urlify(text)+"<br/></div>");
				}
				if ($("#chat-header").hasClass("min")){
					if (type == "chat"){
						startChatFlash();
					}
				}
				else{
					$("#chat-messages").animate({ scrollTop: $("#chat-messages").prop("scrollHeight") }, 100);
				}
			}
	
			// $('#chat-header').live("click", function(e){
			// 	$(this).toggleClass("min");
			// 	$('#chat-messages').slideToggle(100);
			// 	$('#chat-bar').slideToggle(100);
			// 	$("#chat-messages").animate({ scrollTop: $("#chat-messages").prop("scrollHeight") }, 1);
			// 	stopChatFlash();
			// });
			
			// $('#clients-header').live("click", function(e){
			// 	$(this).toggleClass("min");
			// 	$('#clients-list').slideToggle(100);
			// 	$('#chat-bar').slideToggle(100);
			// });
			
			$('.chat-bar-button').live("click", function(e){
				$('.icon').toggle();
				$('.input-box').toggle();
				$('#clients-header, #clients-list, #chat-header, #chat-messages').toggle();
				if ($('#chat-messages').is(':visible')) {
					$("#chat-messages").animate({ scrollTop: $("#chat-messages").prop("scrollHeight") }, 1);	
				} else {
					$('body').animate({ scrollTop: $('body').prop('scrollHeight') }, 1);
				}
				$('.sb-header').removeClass('.sb-header').addClass('.sb-header');
				e.preventDefault();
			});
	
			// $('#rules-header').live("click", function(e){
			// 	$(this).toggleClass("min");
			// 	$('#rules-list').slideToggle(100);
			// })
	
			function startChatFlash(){
				if (chatFlashInterval == null){
					chatFlashInterval = setInterval(function(){ $("#chat-header").toggleClass("alert"); }, 1200);
					chatFlashTimeout = setTimeout(function(){
						clearInterval(chatFlashInterval);
						chatFlashInterval = null;
						$('#chat-header').addClass("alert");
					}, 6000);
				}
			}
	
			function stopChatFlash(){
				clearInterval(chatFlashInterval);
				clearTimeout(chatFlashTimeout);
				chatFlashInterval = null;
				$('#chat-header').removeClass("alert");
			}
	
			// scoreboard
			now.updateScoreboard = function(usersHash){
				$('#clients-list').empty();
				for (var clientId in usersHash){
					var name = encodeHTML(usersHash[clientId]["name"]);
					var color = usersHash[clientId]["color"];
					var wins = usersHash[clientId]["wins"];
					var score = usersHash[clientId]["score"];
					var numGames = usersHash[clientId]["numGames"];
					var tipsyHTML = getTipsyHTML(name, numGames, wins, score, color);
					
					if (usersHash[clientId]["type"] == "Observer"){
						$('#clients-list').append('<div class="user-'+clientId+' score passive" original-title="'+tipsyHTML+'"><strong style="color: '+color+';"><span class="client-name">'+name+'</span>:</strong> '+score+'</div>');
					}
					else{
						$('#clients-list').append('<div class="user-'+clientId+' score" original-title="'+tipsyHTML+'"><strong style="color: '+color+';"><span class="client-name">'+name+'</span>:</strong> '+score+'</div>');
					}
				}
				$('.score').tipsy({gravity: 'e', fade: true, html: true, theme: "white"});
			}
			
			function getTipsyHTML(name, numGames, wins, score, color){
				var winRatio = numGames == 0 ? 0 : (100*wins/numGames).toFixed(2);
				var avgScorePerGame = numGames == 0 ? 0 : Math.floor(score/numGames);
				return "<div class='tipsy-stats'>\
					<div class='stats-heading' style='color: "+color+";'>"+name+"</div>\
					<hr>\
					<div class='stats-block stats-main'>\
						<div class='stats-sub'><span class='stats-title'>Wins:</span> "+wins+"</div>\
						<div class='stats-sub'><span class='stats-title'>Games:</span> "+numGames+"</div>\
						<div class='stats-sub'><span class='stats-title'>Score:</span> "+score+"</div>\
					</div>\
					<hr>\
					<div class='stats-block stats-extra'>\
						<div class='stats-sub'><span class='stats-title'>Win Ratio:</span> "+winRatio+"%</div>\
						<div class='stats-sub'><span class='stats-title'>Avg Score Per Game:</span> "+avgScorePerGame+"</div>\
					</div>\
				</div>";
			}
	
			// alert to pass cards
			now.notifyPassCards = function(numCardsToPass){
				$('#game-seven-message').text("Select "+numCardsToPass+" card"+(numCardsToPass == 1 ? '' : 's')+" to pass").show();
			}
	
			// alert to discard cards
			now.notifyDiscardCards = function(numCardsToPass){
				$('#game-ten-message').text("Select "+numCardsToPass+" card"+(numCardsToPass == 1 ? '' : 's')+" to discard").show();
			}
			
			now.populateNickname = function(name){
				$('#nickname-submit').val(''+name);
			}
	
			// notification of turn
			now.notifyTurn = function(){
				var counter = 0;
				if (windowFocused == false){
					ping();
					windowTitleInterval = setInterval(function(){
						if (counter % 2 == 0){
							document.title = "jabys - YOUR MOVE";
						}
						else{
							document.title = "jabys - big2 on roids";
						}
						counter++;
					}, 1500);
				}
			}
	
			window.onblur = function(){
				windowFocused = false;
			}
			window.onfocus = function(){
				windowFocused = true;
				clearInterval(windowTitleInterval);
				document.title = "jabys - big2 on roids";
			}
	
			$('#game-board').live("keypress", function(e){
				var cardIndex = keyMapping[e.keyCode];
				if (e.keyCode == 13){
					$('#make-move-btn').trigger('click');
				}
				else if (e.keyCode == 112){
					$('#make-pass-move-btn').trigger('mousedown');
				}
				else if (cardIndex != undefined){
					$('#slot-bot').find(".card:nth-child("+cardIndex+")").trigger('click');
				}
			});
			
			$('#game-board').keydown(function(e){
				if (e.keyCode == 37){
					// shift selected cards to the left
					var selectedCards = $('.selected');
					var lowestIndexSoFar = 0;
					// get the index of the leftmost selected card
					selectedCards.each(function(index, card){
						// shift left, if you can
						if ($(this).index() == lowestIndexSoFar){
							// don't shift left, increment lowestIndexSoFar
							lowestIndexSoFar++;
						}
						else{
							// swap this card with its left neighbor
							var cardToSwap = $(this).prev();
							// swap properties
							var tempLeft = cardToSwap.css('left');
							cardToSwap.css('left', $(this).css('left'));
							$(this).css('left', tempLeft);
							// swap div ordering
							$(this).swapWith(cardToSwap);
						}
					});
				}
				else if (e.keyCode == 39){
					// shift selected cards to the right
					var selectedCards = $('.selected').get().reverse();
					var highestIndexSoFar = $('#slot-bot').children().length-1;
					// get the index of the rightmost selected card
					$(selectedCards).each(function(index, card){
						if ($(this).index() == highestIndexSoFar){
							highestIndexSoFar--;
						}
						else{
							var cardToSwap = $(this).next();
							var tempLeft = cardToSwap.css('left');
							cardToSwap.css('left', $(this).css('left'));
							$(this).css('left', tempLeft);
							$(this).swapWith(cardToSwap);
						}
					});
				}
				else if (e.keyCode == 40){
					// unselect all selected cards
					$('.selected').trigger('click');
				}
				else if (e.keyCode == 8){
					// backspace
					e.preventDefault();
				}
			});
			
			$('.lobby-icon').live("click", function(e) {
				var confirmLobby = confirm("You are about to leave the game and go to the lobby.  Are you sure?");
				if (confirmLobby) {
					document.location.href="/lobby";
				}
			});
			
			now.redirectToLobby = function(message) {
				$('.lobby-icon').trigger('click');
			}
			
			$('.lobby-icon').tipsy({gravity: 'w', fade: true, html: true, theme: "white"});			
			$('.rules-icon').tipsy({gravity: 'e', fade: true, html: true, theme: "white"});			
			
			$('.rules-icon').live("click", function(e){
				$(this).attr('data-loads', parseInt($(this).attr('data-loads')) + 1);
				$('#rules').animate({"height": "toggle"}, 1);
				if ($(this).attr('data-loads') % 2 == 1){
					var height = "-=170px";
				}
				else{
					var height = "+=170px";
				}
				$('#chat-messages').animate({"height": height}, 1);
				$('#clients-list').animate({"height": height}, 1);

			});
			
			
			$('.card_select').live("click", function(e){
				var cardback_file_name = $(this).attr("data-cardback-name");
				current_cardback_file_name = cardback_file_name;
				var cards = $('.card');
				cards.each(function(card, index) {
					$(this).css("background-image", "url('/images/cardback/"+cardback_file_name+"')");
				});
				e.preventDefault();
			});
			
			
		});

		jQuery.fn.swapWith = function(to) {
		    return this.each(function() {
		        var copy_to = $(to).clone(true);
		        var copy_from = $(this).clone(true);
		        $(to).replaceWith(copy_from);
		        $(this).replaceWith(copy_to);
		    });
		};
				
	</script>
</head>

<body>
	<div id="wrapper">
		<div id="game-board" tabindex=1>
		
			<div class="game-slots">		
				<div id="slot-bot-container" class="slot-container">
					<div id="slot-bot-label" class="player-name"></div>
					<div id="slot-bot" class="slot"></div>
					<div id="slot-bot-sc"></div>
				</div>
			
				<div id="slot-left-container" class="slot-container horizontal-left">
					<div id="slot-left-label" class="player-name"></div>
					<div id="slot-left" class="slot"></div>
				</div>
			
				<div id="slot-top-container" class="slot-container">
					<div id="slot-top-label" class="player-name"></div>
					<div id="slot-top" class="slot"></div>
				</div>
			
				<div id="slot-right-container" class="slot-container horizontal">
					<div id="slot-right-label" class="player-name"></div>
					<div id="slot-right" class="slot"></div>
				</div>		
			
				<div id="stage">
					<div id="slot-middle">
					</div>
			
					<div id="slot-discard">
					</div>
				</div>
				<div id="game-controls">
					<div class="game-feedback" id="game-seven-message" style="display:none;"></div>
					<div class="game-feedback" id="game-ten-message" style="display:none;"></div>
					<div class="game-feedback" id="game-jack-message" style="display:none;">Play Lower!</div>
					<div class="game-feedback" id="game-error-message" style="display:none;"></div>
				</div>
			</div>
			
			<div id="card-options">
				<a href="#" data-cardback-name="bicycle_blue.png" class="card_select"><img src="/images/cardback/bicycle_blue.png"/></a>
				<a href="#" data-cardback-name="bicycle_red.jpg" class="card_select"><img src="/images/cardback/bicycle_red.jpg"/></a>
				<a href="#" data-cardback-name="mirror.png" class="card_select"><img src="/images/cardback/mirror.png"/></a>
				<a href="#" data-cardback-name="smoke.png" class="card_select"><img src="/images/cardback/smoke.png"/></a>
				<a href="#" data-cardback-name="ultraviolet.png" class="card_select"><img src="/images/cardback/ultraviolet.png"/></a>
				<a href="#" data-cardback-name="cutcaster_vector_1.jpg" class="card_select"><img src="/images/cardback/cutcaster_vector_1.jpg"/></a>
				<a href="#" data-cardback-name="cutcaster_vector_2.jpg" class="card_select"><img src="/images/cardback/cutcaster_vector_2.jpg"/></a>
				<a href="#" data-cardback-name="cutcaster_vector_3.jpg" class="card_select"><img src="/images/cardback/cutcaster_vector_3.jpg"/></a>
				<a href="#" data-cardback-name="erdnase_acorn_green.jpg" class="card_select"><img src="/images/cardback/erdnase_acorn_green.jpg"/></a>
				<a href="#" data-cardback-name="erdnase_smith_red.jpg" class="card_select"><img src="/images/cardback/erdnase_smith_red.jpg"/></a>
				<a href="#" data-cardback-name="domo.jpg" class="card_select"><img src="/images/cardback/domo.jpg"/></a>
			</div>
		</div>		
		
		
		<div id="sidebar">

			<div id="chat-header" class="sb-header">
				<span class="chat-icon"><img src="/images/icon-chat.png" width="18px" /></span>
				<span class="chat-header-text">Chat</span>				
				<span class="rules-icon" data-loads="0" title="Rules" original-title="Rules"><img src="/images/icon-rules.png" width="18px"/></span>
				<span class="lobby-icon" title="Back to Lobby" original-title="Back to Lobby"><img src="/images/icon-lobby.png" width="18px"/></span> 
			</div>
			<div id="rules" style="display:none;">
				<strong>5</strong> - Draw X cards from the discard pile<br/>
				<strong>7</strong> - Pass X cards to the next player<br/>
				<strong>8</strong> - Clear the round and go again<br/>
				<strong>10</strong> - Discard X cards<br/>
				<strong>J</strong> - Play lower than the previous hand (until turn comes back around to the player who most recently played a J)<br/>
				<br/>
				Where X is how many of that card was in the hand that you played<br/>
			</div>
			<div id="chat-messages">
			</div>

			<div id="clients-header" class="sb-header" style="display:none;">
				<span class="clients-icon"><img src="/images/icon-client.png" width="18px" /></span>
				<span class="clients-header-text">People</span>
				<span class="lobby-icon" title="Back to Lobby" original-title="Back to Lobby"><img src="/images/icon-lobby.png" width="18px"/></span> 
			</div>
			<div id="clients-list" style="display:none;"></div>

			<div id="chat-bar">
				<div class="chat-bar-button">
					<div class="clients-icon icon"><img src="/images/icon-client.png" width="20px"/></div>
					<div class="chat-icon icon" style="display:none;"><img src="/images/icon-chat.png" width="20px"/></div>
				</div>
				<div class="input-box">
					<input type="text" id="chat-submit" placeholder="type here to chat"/>
				</div>
				<div class="input-box" style="display:none;">
					<input type="text" id="clients-search" placeholder="search people"/>
				</div>
				<div class="input-box" style="display:none;">
					<input type="text" id="nickname-submit" placeholder="nickname"/>
				</div>	
			</div>
		</div>
		
	</div>	
	
	
		
	
	<audio id="ping" src="http://www.schillmania.com/projects/soundmanager2/demo/_mp3/mouseover.mp3" preload="auto"></audio>
	
	<div id="sample-card" class="card" style="display: none;"></div>
</body>
</html>